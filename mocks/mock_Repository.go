// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (

	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Clone provides a mock function with given fields: client
func (_m *MockRepository) Clone(client *MockClient) *MockRepository {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for Clone")
	}

	var r0 *MockRepository
	if rf, ok := ret.Get(0).(func(*MockClient) *MockRepository); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Get(0).(*MockRepository)
	}

	return r0
}

// MockRepository_Clone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clone'
type MockRepository_Clone_Call struct {
	*mock.Call
}

// Clone is a helper method to define mock.On call
//   - client C
func (_e *MockRepository_Expecter) Clone(client interface{}) *MockRepository_Clone_Call {
	return &MockRepository_Clone_Call{Call: _e.mock.On("Clone", client)}
}

func (_c *MockRepository_Clone_Call) Run(run func(client *MockClient)) *MockRepository_Clone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*MockClient))
	})
	return _c
}

func (_c *MockRepository_Clone_Call) Return(_a0 *MockClient) *MockRepository_Clone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Clone_Call) RunAndReturn(run func(*MockClient) *MockRepository) *MockRepository_Clone_Call {
	_c.Call.Return(run)
	return _c
}

// Transaction provides a mock function with given fields: fn
func (_m *MockRepository) Transaction(fn func(*MockClient) error) error {
	ret := _m.Called(fn)

	if len(ret) == 0 {
		panic("no return value specified for Transaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(*MockClient) error) error); ok {
		r0 = rf(fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Transaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transaction'
type MockRepository_Transaction_Call struct {
	*mock.Call
}

// Transaction is a helper method to define mock.On call
//   - fn func(*MockClient) error
func (_e *MockRepository_Expecter) Transaction(fn interface{}) *MockRepository_Transaction_Call {
	return &MockRepository_Transaction_Call{Call: _e.mock.On("Transaction", fn)}
}

func (_c *MockRepository_Transaction_Call) Run(run func(fn func(*MockClient) error)) *MockRepository_Transaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(*MockClient) error))
	})
	return _c
}

func (_c *MockRepository_Transaction_Call) Return(_a0 error) *MockRepository_Transaction_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Transaction_Call) RunAndReturn(run func(func(*MockClient) error) error) *MockRepository_Transaction_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
